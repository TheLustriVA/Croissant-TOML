[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "croissant-toml"
version = "0.2.0"
description = "Human-readable TOML format for Croissant and Croissant-RAI ML dataset metadata"
readme = "README.md"
license = "CC0-1.0"
requires-python = ">=3.9"
authors = [
    { name = "Kieran Bicheno", email = "kieran@example.org" },
]
maintainers = [
    { name = "Kieran Bicheno", email = "kieran@example.org" },
]
keywords = [
    "machine-learning",
    "metadata",
    "toml",
    "json-ld",
    "croissant",
    "responsible-ai",
    "dataset-documentation",
    "academic",
    "research"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: CC0 1.0 Universal (CC0 1.0) Public Domain Dedication",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Markup",
]

dependencies = [
    # Core dependencies
    "click>=8.0.0",
    "jsonschema>=4.0.0",
    "tomlkit>=0.11.0",
    # Enhanced validation dependencies
    "rfc3987>=1.3.8", # For URL/IRI validation
    # Optional RDF support (conditional)
    "rdflib>=6.0.0; extra=='rdf'",
    "rdflib-jsonld>=0.6.0; extra=='rdf'",
    "rdflib>=7.1.4",
    "pbr>=7.0.1",
    "bandit[toml]>=1.8.6",
]

[project.optional-dependencies]
# RDF support for advanced JSON-LD processing
rdf = [
    "rdflib>=6.0.0",
    "rdflib-jsonld>=0.6.0",
]

# Development dependencies
dev = [
    # Testing
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",

    # Code quality
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",

    # Security
    "bandit[toml]>=1.7.0",
    "safety>=2.0.0",

    # Pre-commit
    "pre-commit>=3.0.0",

    # Build tools
    "build>=0.10.0",
    "twine>=4.0.0",
]

# Documentation dependencies
docs = [
    "mkdocs>=1.4.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.20.0",
]

# All optional dependencies
all = [
    "croissant-toml[rdf,dev,docs]"
]

[project.urls]
Homepage = "https://github.com/TheLustriVA/Croissant-TOML"
Repository = "https://github.com/TheLustriVA/Croissant-TOML"
Documentation = "https://github.com/TheLustriVA/Croissant-TOML/blob/main/README.md"
"Bug Reports" = "https://github.com/TheLustriVA/Croissant-TOML/issues"
Funding = "https://github.com/sponsors/TheLustriVA"
"Research Paper" = "https://arxiv.org/abs/XXXX.XXXXX"

[project.scripts]
croissant-toml = "croissant_toml.cli:main"

[project.entry-points."croissant_toml.extensions"]
# Entry points for future extensions

# Tool configurations
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
exclude = '''
.eggs
| .git
| .hg
| .mypy_cache
| .tox
| .venv
| _build
| buck-out
| build
| dist
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["croissant_toml"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = false
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "rdflib.*",
    "rfc3987.*",
    "tomlkit.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=croissant_toml",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
markers = [
    "integration: marks tests as integration tests (may be slow)",
    "unit: marks tests as unit tests (fast)",
    "validation: marks tests related to validation functionality",
    "conversion: marks tests related to format conversion",
    "cli: marks tests related to command-line interface",
    "rai: marks tests related to RAI functionality",
]

[tool.coverage.run]
source = ["croissant_toml"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*Protocol.*:",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
tests = ["B201", "B301"]
skips = ["B101", "B601"]

[tool.bandit.assert_used]
skips = ["*_test.py", "*/test_*.py"]

# Hatch build configuration
[tool.hatch.version]
path = "croissant_toml/__init__.py"

[tool.hatch.build.targets.sdist]
include = [
    "/croissant_toml",
    "/tests",
    "/README.md",
    "/LICENSE",
    "/CHANGELOG.md",
]

[tool.hatch.build.targets.wheel]
packages = ["croissant_toml"]

# UV-specific configuration for dependency resolution
[tool.uv]
dev-dependencies = [
    # Testing framework
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-xdist>=3.0.0", # Parallel testing
    # Code formatting and linting
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "flake8-docstrings>=1.7.0",
    "flake8-type-checking>=2.0.0",
    # Type checking
    "mypy>=1.0.0",
    "types-requests>=2.28.0",
    "types-toml>=0.10.0",
    # Security scanning
    "bandit[toml]>=1.7.0",
    "safety>=2.0.0",
    # Development tools
    "pre-commit>=3.0.0",
    "tox>=4.0.0",
    # Documentation
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    # Build and release tools
    "build>=0.10.0",
    "twine>=4.0.0",
    "bump2version>=1.0.0",
]

[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # Pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"tests/**/*" = ["S101"]  # Allow assert statements in tests
