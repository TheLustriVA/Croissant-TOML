name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install UV package manager
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        uv pip install --system --upgrade pip
        uv pip install --system -r requirements.txt
        uv pip install --system -e .
        uv pip install --system pytest pytest-cov

    - name: Run pre-commit hooks
      run: |
        uv pip install --system pre-commit
        pre-commit run --all-files

    - name: Test with pytest
      run: |
        pytest tests/ --cov=croissant_toml --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install UV and dependencies
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        uv pip install --system -r requirements.txt
        uv pip install --system -e .

    - name: Create sample JSON-LD file
      run: |
        cat > sample.json << 'EOF'
        {
          "@context": {
            "sc": "https://schema.org/",
            "cr": "http://mlcommons.org/croissant/"
          },
          "conformsTo": ["http://mlcommons.org/croissant/1.0"],
          "sc:name": "Test Dataset",
          "sc:description": "A sample dataset for testing",
          "sc:version": "1.0.0"
        }
        EOF

    - name: Test CLI conversions
      run: |
        python -m croissant_toml.cli to-toml sample.json -o test_output.toml
        python -m croissant_toml.cli validate test_output.toml
        python -m croissant_toml.cli to-json test_output.toml -o roundtrip.json
        ls -la test_output.toml roundtrip.json

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: test-outputs
        path: |
          test_output.toml
          roundtrip.json

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install UV and security tools
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        uv pip install --system bandit[toml] pbr safety

    - name: Security scan with bandit
      run: |
        bandit -r croissant_toml/ -s B101,B603 -x tests/

    - name: Check for known security vulnerabilities
      run: |
        safety check --ignore 70612
      continue-on-error: true
